list – Maintaining a Manually Sorted Queue
You can use a sorted list to quickly identify and delete the smallest or
largest element. The downside is that inserting new elements into a list is a
slow O(n) operation.
While the insertion point can be found in O(log n) time using
bisect.insort40 in the standard library, this is always dominated by the
slow insertion step.
Maintaining the order by appending to the list and re-sorting also takes at
least O(n log n) time. Another downside is that you must manually take
care of re-sorting the list when new elements are inserted. It’s easy to
introduce bugs by missing this step, and the burden is always on you, the
developer.
Therefore, I believe that sorted lists are only suitable as priority queues
when there will be few insertions.
q = []
q.append((2, 'code'))
q.append((1, 'eat'))
q.append((3, 'sleep'))
# NOTE: Remember to re-sort every time
# a new element is inserted, or use
# bisect.insort().
q.sort(reverse=True)
while q:
 next_item = q.pop()
 print(next_item)
# Result:
# (1, 'eat')
# (2, 'code')
# (3, 'sleep')
heapq – List-Based Binary Heaps
This is a binary heap implementation usually backed by a plain list, and it
supports insertion and extraction of the smallest element in O(log n)
time.41
This module is a good choice for implementing priority queues in Python.
Since heapq technically only provides a min-heap implementation, extra
steps must be taken to ensure sort stability and other features typically
expected from a “practical” priority queue.42
import heapq
q = []
heapq.heappush(q, (2, 'code'))
heapq.heappush(q, (1, 'eat'))
heapq.heappush(q, (3, 'sleep'))
while q:
 next_item = heapq.heappop(q)
 print(next_item)
# Result:
# (1, 'eat')
# (2, 'code')
# (3, 'sleep')
queue.PriorityQueue – Beautiful Priority Queues
This priority queue implementation uses heapq internally and shares the
same time and space complexities.43
The difference is that PriorityQueue is synchronized and provides locking
semantics to support multiple concurrent producers and consumers.
Depending on your use case, this might be helpful—or just slow your
program down slightly. In any case, you might prefer the class-based
interface provided by PriorityQueue over using the function-based
interface provided by heapq.
from queue import PriorityQueue
q = PriorityQueue()
q.put((2, 'code'))
q.put((1, 'eat'))
q.put((3, 'sleep'))
while not q.empty():
 next_item = q.get()
 print(next_item)
# Result:
# (1, 'eat')
# (2, 'code')
# (3, 'sleep')